/* Styles for .high-contrast-theme aren't necessary
   because the addon sets the theme name to "default". */

.blocklyEditableText > text,
.scratch-renderer.default-theme .blocklyEditableField > text {
  fill: var(--editorTheme3-inputColor-text);
}
.blocklyHtmlInput,
.scratch-renderer.default-theme .blocklyHtmlInput {
  /* Hide the HTML input so that only the SVG part is visible.
     This is needed for transparent inputs. */
  background-color: transparent;
  color: transparent;
  caret-color: var(--editorTheme3-inputColor-text);
}
.sa-theme3-editable-label .blocklyHtmlInput {
  /* Labels in custom block editor (focused state) */
  background-color: var(--editorTheme3-inputColor-editableLabel);
  color: var(--editorTheme3-inputColor-text);
}
.scratch-renderer.default-theme .blocklyEditableField > rect:not(.blocklyDropdownRect) {
  /* Labels in custom block editor.
     In the new Blockly version, they currently look like normal text inputs. */
  fill: var(--editorTheme3-inputColor);
}

/* Override Scratch's high contrast theme */
.blocklyDropDownDiv .goog-menuitem {
  color: white;
}
.blocklyDropDownDiv .blocklyText {
  /* "Play note" dropdown */
  fill: white;
}
.blocklyDropDownDiv .goog-menuitem-highlight,
.blocklyDropDownDiv .goog-menuitem-hover,
.blocklyDropDownDiv .blocklyMenu .blocklyMenuItem:hover,
.sa-contextmenu-colored .blocklyContextMenu .goog-menuitem-highlight,
.sa-contextmenu-colored .blocklyContextMenu .blocklyMenuItem:hover {
  background-color: var(--editorTheme3-hoveredItem, rgba(0, 0, 0, 0.2));
}

.scratchCommentRect {
  fill: var(--editorTheme3-commentColor);
}
.scratchCommentBody,
.scratchCommentTextarea,
.blocklyComment .blocklyTextarea {
  background-color: var(--editorTheme3-commentColor);
}
.scratchWorkspaceCommentBorder {
  stroke: var(--editorTheme3-commentBorder);
}
.blocklyComment {
  --colour-commentBorder: var(--editorTheme3-commentBorder);
}
.blocklyCommentTopbarBackground {
  fill: var(--editorTheme3-commentTopBar);
}
.scratchCommentTextarea::placeholder,
.blocklyCommentText::placeholder {
  color: var(--editorTheme3-commentTextTransparent);
}
.scratchCommentText,
.scratch-renderer.default-theme .blocklyComment .blocklyTextarea {
  fill: var(--editorTheme3-commentText);
  color: var(--editorTheme3-commentText);
}

[class*="monitor_value_"],
[class*="monitor_large-value_"],
[class*="monitor_list-value_"] {
  background-color: var(--sa-monitor-background) !important;
  border-color: var(--sa-monitor-border, rgba(0, 0, 0, 0.15));
  color: var(--sa-monitor-text) !important;
}
[class*="monitor_list-input_"] {
  color: inherit !important;
}

.sa-colormode-submenu li:nth-child(1),
.sa-colormode-submenu li:nth-child(2) {
  filter: opacity(0.5) grayscale(1);
  cursor: default;
}
.sa-colormode-submenu .sa-theme3-managed {
  filter: opacity(0.5);
  cursor: default;
}
.sa-colormode-submenu li:nth-child(1) div img:first-child,
.sa-colormode-submenu li:nth-child(2) div img:first-child,
.sa-theme3-link div img:first-child {
  visibility: hidden;
}
.sa-colormode-submenu li:nth-child(1):hover,
.sa-colormode-submenu li:nth-child(2):hover,
.sa-theme3-managed:hover {
  background-color: transparent;
}
.sa-theme3-link .sa-theme3-new-tab {
  margin-left: auto;
  height: 1.25rem;
  width: 1.25rem;
  filter: var(--editorDarkMode-menuBar-filter, none);
}
[dir="rtl"] .sa-theme3-link .sa-theme3-new-tab {
  margin-left: 0;
  margin-right: auto;
  transform: rotate(-90deg);
}
